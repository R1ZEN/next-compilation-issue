diff --git a/node_modules/robot3/index.d.ts b/node_modules/robot3/index.d.ts
index 3575266..16b3f98 100644
--- a/node_modules/robot3/index.d.ts
+++ b/node_modules/robot3/index.d.ts
@@ -7,9 +7,9 @@ declare module 'robot3' {
    * @param states - An object of states, where each key is a state name, and the values are one of *state* or *invoke*.
    * @param context - A function that returns an object of extended state values. The function can receive an `event` argument.
    */
-  export function createMachine<S = {}, C = {}>(
-    initial: keyof S,
-    states: { [K in keyof S]: MachineState },
+  export function createMachine<S = string, C = {}>(
+    initial: S,
+    states: { [K in S]: MachineState },
     context?: ContextFunction<C>
   ): Machine<typeof states, C, keyof typeof states>
   /**
@@ -19,8 +19,8 @@ declare module 'robot3' {
    * @param states - An object of states, where each key is a state name, and the values are one of *state* or *invoke*.
    * @param context - A function that returns an object of extended state values. The function can receive an `event` argument.
    */
-  export function createMachine<S = {}, C = {}>(
-    states: { [K in keyof S]: MachineState },
+  export function createMachine<S = string, C = {}>(
+    states: { [K in S]: MachineState },
     context?: ContextFunction<C>
   ): Machine<typeof states, C, keyof typeof states>
 
@@ -38,9 +38,9 @@ declare module 'robot3' {
    * @param state - The name of the destination state.
    * @param args - Any extra argument will be evaluated to check if they are one of Reducer, Guard or Action.
    */
-  export function transition<C, E>(
+  export function transition<S = string, C = {}, E = string>(
     event: string,
-    state: string,
+    state: S,
     ...args: (Reducer<C, E> | Guard<C, E> | Action<C, E>)[]
   ): Transition
 
@@ -126,6 +126,9 @@ declare module 'robot3' {
   export type SendEvent = string | { type: string; [key: string]: any }
   export type SendFunction<T = SendEvent> = (event: T) => void
 
+  export type DoneEvent<T> = { type: 'done', data: T };
+  export type ErrorEvent<E = Error> = { type: 'error', error: E };
+
   export type Machine<S = {}, C = {}, K = string> = {
     context: C
     current: K
@@ -162,11 +165,12 @@ declare module 'robot3' {
     reducers: any[]
   }
 
-  export interface Service<M extends Machine> {
+  export interface Service<M extends Machine = Machine> {
     machine: M
     context: M['context']
     onChange: InterpretOnChangeFunction<M>
-    send: SendFunction
+    send: SendFunction,
+    child?: Service<Machine>
   }
 
   export type Immediate = Transition
